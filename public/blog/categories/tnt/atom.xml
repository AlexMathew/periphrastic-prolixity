<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tnt | Periphrastic Prolixity]]></title>
  <link href="http://periphrastic-prolixity.herokuapp.com/blog/categories/tnt/atom.xml" rel="self"/>
  <link href="http://periphrastic-prolixity.herokuapp.com/"/>
  <updated>2014-10-26T12:43:48+05:30</updated>
  <id>http://periphrastic-prolixity.herokuapp.com/</id>
  <author>
    <name><![CDATA[Alex Mathew]]></name>
    <email><![CDATA[alexmathew003@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The TNT Journey - Part 3]]></title>
    <link href="http://periphrastic-prolixity.herokuapp.com/blog/2014/10/26/the-tnt-journey-part-3/"/>
    <updated>2014-10-26T11:27:57+05:30</updated>
    <id>http://periphrastic-prolixity.herokuapp.com/blog/2014/10/26/the-tnt-journey-part-3</id>
    <content type="html"><![CDATA[<p>Records, exams, assignments. The absolute worst time possible. Indian education will not improve till they get rid of this concept of maintaining a formal record book where you write unnecessary garbage. In the middle of all this, finding time to work on the TNT problem has been hard. But I&rsquo;ve been reading, trying out stuff and making some gradual progress. And of late, I&rsquo;ve approached this in a different way. Advice from a professor gave me an interesting way to go about this problem. Implementing has been hard, but the idea behind it is brilliant.</p>

<!--more-->


<p>&ldquo;Don&rsquo;t look for individual best performers. Put the team together and see the overall rating of the team. Pick the best team, not a collection of the best players&rdquo;. I had never thought of that, really. The best players statistic-wise could all be batsmen, and I&rsquo;d end up with a batting-heavy team with a poor bowling attack. So I had to find a way to strike a balance, by considering the team as a whole. And I considered using my professor&rsquo;s advice - genetic algorithms.</p>

<p>The idea was simple. From this <a href="http://www.obitko.com/tutorials/genetic-algorithms/ga-basic-description.php">basic introductory post about GA</a>,</p>

<blockquote><p>Algorithm is started with a set of solutions (represented by chromosomes) called population. Solutions from one population are taken and used to form a new population. This is motivated by a hope, that the new population will be better than the old one. Solutions which are selected to form new solutions (offspring) are selected according to their fitness - the more suitable they are the more chances they have to reproduce.</p></blockquote>

<p>I found a bunch of research papers, where people used GAs to do this exact thing - build fantasy cricket teams. The concept seemed simple enough - pick the parameters you want to maximise on, and implement the algorithm.</p>

<p>Implementing seemed like a bitch. The NSGA-II algorithm was an extremely computation-intensive algorithm that involved many iterations, so I knew I couldn&rsquo;t write the algorithm from scratch and expect to get an optimized implementation. I had either go for Python genetic programming libraries, or find someone else&rsquo;s implementation of the algorithm. I checked out <a href="https://code.google.com/p/deap/">Deap</a> - it looked like it could effectively give me what I needed. But setting up was really hard. I couldn&rsquo;t make much progress even after hours of reading the docs. So, Deap is on hold.</p>

<p>I found <a href="https://code.google.com/p/pynsga2/">another implementation of NSGA-II</a> that used multiprocessing to improve the speed of implementation. It required the fitness to be in a separate file - I need to try it out and see how that works.</p>

<p>So for now, it&rsquo;s still an experimentation phase with the implementation of the algorithm. I took some time out to decide the parameters I&rsquo;d want to maximise the fitness on.</p>

<p>BATSMEN :</p>

<ul>
<li><p>Runs per wicket : The batting average of the batsman. For good batsmen in the current cricketing world, this number hovers around 40.</p></li>
<li><p>Runs per 100 balls : The strike rate of the batsman. A strike rate of >85 is generally considered very good. A batsman with a 100+ strike rate is an ideal pinch hitter to finish the innings.</p></li>
<li><p>Pinch hitting rate : Boundaries scored per 100 balls, with more weight given to sixes. So effectively,
<code>python
pinch_hitting = 100.0 * (fours + (1.5 * sixes)) / balls_faced
</code></p></li>
</ul>


<p>BOWLERS :</p>

<p>The standard bowling statistics require to be minimized on. So for convenience sake, I took the inverse of these numbers, so I could maximise on them.</p>

<ul>
<li><p>Overs to concede 100 runs : A number built from the inverse of the economy rate. For good bowlers, this number is somewhere in the mid-20s.</p></li>
<li><p>Wickets per 10 overs : Built from the inverse of the bowling average. It is usually >1.5 for good strike bowlers.</p></li>
<li><p>Overs to concede 10 boundaries : Built from the inverse of the bowler&rsquo;s pinch hitting conceding rate, with weightage for sixes.</p></li>
</ul>


<p>The hard part is finding ways to measure fielding/wicketkeeping performance. It was possible to find the total number of field dismissals that a player, but there&rsquo;s no way to know how many matches the player played. I only have the number of innings he batted or bowled in. It is possible that he played a match where he didn&rsquo;t bat, didn&rsquo;t bowl and didn&rsquo;t have a catch or run out credited to him.</p>

<p>I need a way to quantify a player&rsquo;s field performance. And I need to see how to implement NSGA-II to draft my team.</p>

<p>Updates soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The TNT Journey - Part 2]]></title>
    <link href="http://periphrastic-prolixity.herokuapp.com/blog/2014/10/17/the-tnt-journey-part-2/"/>
    <updated>2014-10-17T00:02:10+05:30</updated>
    <id>http://periphrastic-prolixity.herokuapp.com/blog/2014/10/17/the-tnt-journey-part-2</id>
    <content type="html"><![CDATA[<p>Step 1 : Get cummulative statistics. <a href="http://periphrastic-prolixity.herokuapp.com/blog/2014/10/16/the-tnt-journey-part-1/">Done</a>.</p>

<p>Now I need to find a way to measure the performance of these players during this period. Several people have written about different statistics to do this. I need to pick the best ones for the problem I have at hand.</p>

<!--more-->


<p>Aggregation worked beautifully. I got the cummulative stats I needed to work with. Now I have to put this into a new collection and I&rsquo;m all set to go. Except, it wasn&rsquo;t that easy. Updating a collection with results from the aggregation pipeline is pretty hard. Looping through the results is too inefficient. After some research (read, StackOverflow), I found the $out pipeline stage. Seemed like just what I needed. I gave it a shot and got this.</p>

<pre><code>"errmsg" : "exception: Unrecognized pipeline stage name: '$out'"
</code></pre>

<p>Roadblock ! Turns out $out is a new addition in MongoDB 2.6 and I was working with 2.4. So before any more progress could happen, an update had to happen.</p>

<p>While I waited for the 100+ MB file download to complete (I have bad internet - 100MB is a big deal), I read some Quora answers and research papers on performance measures. Now I had to pick the ones that gave the most efficient results.</p>

<p>I needed some proper measures to judge how useful a player is on a team. It&rsquo;s cricket, so a player can contribute to a team in many different ways. He could be a batsman who plays the bulk of the innings to set up the score, or he could be a batsman who faces around 15 or 20 balls to make a quickfire 30. He could be the strike bowler who takes 2 or 3 wickets in his qouta of 10 overs, or he could be the bowler who restricts the opponents&#8217; run flow by conceding only at around 3 runs an over.</p>

<p>So what statistics would I have to consider ?</p>

<ul>
<li><p>Batting average : Runs scored per out. Undoubtedly, one of the most argued about statistics in cricket. And for valid reasons. The batting average ends up extremely skewed in favour of players who come lower down the order, because of the higher probability that they&rsquo;d remain not out.</p></li>
<li><p>Strike rate : Runs scored per 100 balls. I remember watching cricket at a time when a strike rate of around 80 was the trademark of a &ldquo;blazing innings&rdquo;. Times have definitely changed. Higher strike rates are a major focus in batting line ups.</p></li>
<li><p>Batting pinch hitting rate : A very good idea I got out of <a href="http://www.quora.com/What-new-statistical-measures-could-make-cricket-better-in-terms-of-player-evaluation-and-viewer-experience/answer/Thomas-Foster">this Quora answer</a>. Boundaries have a huge impact on the flow of a match. It switches momentum, leads to the fielding setup getting shuffled, and so much more. This can be improved a little by giving a higher weightage to sixes (because sixes are awesome !).</p></li>
<li><p>Bowling average : Runs conceded per wicket taken. The lower, the better. Pretty efficient stat to work with.</p></li>
<li><p>Bowling strike rate : Balls bowled per wicket. Because strike bowlers strike often.</p></li>
<li><p>Bowling pinch hitting rate : If it can be used to quantify a batsman&rsquo;s performance, it can be used for bowlers too. Batsmen want to score boundaries, bowlers should make sure they can&rsquo;t.</p></li>
</ul>


<p>I need to find a way to work with all of these numbers together. And there should be an efficient way to strike a balance. Hashim Amla may not be the quickest scorer, but he definitely scores a lot. James Anderson has an average economy rate, but he&rsquo;s one of the best strike bowlers in the world. Normalize, combine these stats into one index - I need to see what works best.</p>

<p>In other MongoDB news, it turns out $out is not what I need. I need to combine the results from multiple aggregation commands into one collection, but $out puts the result from one aggregation command into one collection. So I need to move back to my original option of looping through the results. Fire IPython, <code>import pymongo</code> and get to work.</p>

<p>Now that I have player-wise statistics, I need to find the most efficient way to quantify their overall performance and pick the best performers.</p>

<p>Part 3 may take a while to come out. I&rsquo;ll work on some options and make one grand update on my progress.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The TNT Journey - Part 1]]></title>
    <link href="http://periphrastic-prolixity.herokuapp.com/blog/2014/10/16/the-tnt-journey-part-1/"/>
    <updated>2014-10-16T14:58:04+05:30</updated>
    <id>http://periphrastic-prolixity.herokuapp.com/blog/2014/10/16/the-tnt-journey-part-1</id>
    <content type="html"><![CDATA[<p>And so, the journey with TNT begins. A 175K+ row dataset. A new challenge.</p>

<p>Over the next few posts, I&rsquo;ll document the various facets of my approach to this problem. Part 1 - how do I get started ?</p>

<!--more-->


<p>I registered for the event a few days after I heard about it. I thought I&rsquo;d give myself time to get some basic idea in place before I get started. So I took my time to read about various statistics that people proposed and how it&rsquo;d help in finding the most efficient players. In my head, it felt like Brad Pitt and Jonah Hill discussing Sabermetrics. I loved how people were crunching numbers to produce evidence of how the statistic they proposed was effective. It seemed simple enough - work with their averages and strike rates and other basic statistics. With the expected basic idea in place, I registered for TNT, and later that day, I got the link to the dataset. Downloaded the file, unzipped it and opened the Excel sheet. And then the bomb dropped.</p>

<p>Ball-by-ball data.</p>

<p>Somehow, I didn&rsquo;t expect that I would have to work with ball-by-ball data. In its native form, ball-by-ball stats are pretty useless (unless you&rsquo;re analyzing run rate patterns and everything). So before getting to work with various performance measures, I had to put the available data together into cummulative stats.</p>

<p>I had a CSV file to work with. I had to pick my weapon to get started. I had a few options.</p>

<p>Option 1 - R. I&rsquo;d always wanted to get started with learning R. I never found a compelling reason to get around to working with it. This seemed like a very good starting point. But I didn&rsquo;t want to learn something from scratch for this. I thought it&rsquo;d be a low-efficiency move to tread into unfamiliar territory, just to work with this dataset. So R, maybe later. Ruled out for now.</p>

<p>Option 2 - Pandas. Familiarity with Python, check. An interest to work with the data side of Python, check. But Pandas is very vast. Getting a base with NumPy to just get started is very hard. So SciPy stack, sometime soon, but not now. Ruled out for now.</p>

<p>I had a large dataset that I had to break into cummulative stats of each player. And I needed somewhere to store it. I would use a database anyway, so why not use it to also aggregate the data the way I need it ? And that was option 3.</p>

<p>Option 3 - MongoDB. I had done some basic work with MongoDB. The M101P course (which, even after 3 attempts, I haven&rsquo;t been able to finish) gave me a decent base with the CRUD and aggregation operations. 175K row dataset - bring out the aggregation framework !</p>

<p>Importing the data into a DB was easier than I thought.</p>

<pre><code>$ mongoimport --db tnt --collection odi --type csv --file ODI.csv --headerline 
</code></pre>

<p>And that was done. Easy stuff.</p>

<p>The hard part was writing aggregation commands to do the required grouping. It&rsquo;s sort of like writing regular expressions - extremely hard, very annoying, but so damn powerful. After a lot of reference from the MongoDB docs and StackOverflow, I managed to get the stats I needed. For example, to get the total runs that a batsman scored.</p>

<pre><code class="javascript MongoDB aggregation to find total runs scored">db.odi.aggregate([{ $group: { _id: "$Batsman", Runs: { $sum: "$Runs Batsman" } } }, { $sort: { "Runs": -1 } }])
</code></pre>

<p>Some easy ones and some hard. And I managed to get the stats I needed.</p>

<p>Now, step 2. I need to put this together and build some performance measures.</p>

<p>Part 2 of this series will be up when I have some significant progress on that front.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cause I'm TNT, I'm Dynamite]]></title>
    <link href="http://periphrastic-prolixity.herokuapp.com/blog/2014/10/15/cause-im-tnt/"/>
    <updated>2014-10-15T23:33:31+05:30</updated>
    <id>http://periphrastic-prolixity.herokuapp.com/blog/2014/10/15/cause-im-tnt</id>
    <content type="html"><![CDATA[<p>(Yes, I just made an AC/DC reference)</p>

<p>First off, huge shout out to LatentView Analytics. Thank you for the job placement offer ! It&rsquo;s given me so much peace of mind, and in turn, freedom to experiment with new stuff.</p>

<p>About a week back, I heard about LatentView&rsquo;s new event for final and pre-final years - &ldquo;The Number Thing&rdquo;. Or, TNT. Perfect experimentation ground.</p>

<!--more-->


<p>All the problems were interesting. It was just a matter of picking the right one.</p>

<p>Cricket stat analysis.
Crime pattern analysis.
Text analysis.</p>

<p>One sports analytics question, and I was sold. That was my choice. Cricket Craze.</p>

<p>I knew it would be a lot of fun. I also expected it to be challenging. What I didn&rsquo;t expect was a 175373-row dataset. I knew this would be a whole new challenge for me. This was the biggest dataset I&rsquo;ve had to work with so far. I had to get new tools in my arsenal to tackle this. This was going to be a crazy ride.</p>

<p>I decided to blog about what my approach to this problem. Think of it as documentation. Over the next few posts, I&rsquo;ll break down my approach - from the initial steps, all the way down to the final result (hopefully!).</p>

<p>If you&rsquo;re reading this and think there&rsquo;s a better way than the approach I&rsquo;ve taken, do give your suggestions ! Also, suggest resources to get started with them. You can write to me at alexmathew003[at]gmail[dot]com</p>

<p>Check out the &ldquo;TNT&rdquo; category on the blog to read the posts. I&rsquo;ll make regular updates as I make progress.</p>
]]></content>
  </entry>
  
</feed>
