<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Latentview | Periphrastic Prolixity]]></title>
  <link href="http://periphrastic-prolixity.herokuapp.com/blog/categories/latentview/atom.xml" rel="self"/>
  <link href="http://periphrastic-prolixity.herokuapp.com/"/>
  <updated>2014-11-01T21:11:01+05:30</updated>
  <id>http://periphrastic-prolixity.herokuapp.com/</id>
  <author>
    <name><![CDATA[Alex Mathew]]></name>
    <email><![CDATA[alexmathew003@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The TNT Journey - Part 6]]></title>
    <link href="http://periphrastic-prolixity.herokuapp.com/blog/2014/11/01/the-tnt-journey-part-6/"/>
    <updated>2014-11-01T21:06:27+05:30</updated>
    <id>http://periphrastic-prolixity.herokuapp.com/blog/2014/11/01/the-tnt-journey-part-6</id>
    <content type="html"><![CDATA[<p>31 October 2014. 7 PM. Struggling because I don&rsquo;t have an eye for design and I didn&rsquo;t know what to do about the infographic. Struggling because I wasn&rsquo;t satisfied with the result I got with this. And that was when rescue arrived.</p>

<p>Deadline extension.</p>

<p>I have never been this happy about a deadline extension. These two extra days give me a lot of time to fix what I&rsquo;d done. And to fix the unsatisfactory results I had, I had one choice - to change the logic I was using.</p>

<p>I had to start from scratch.</p>

<!--more-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The TNT Journey - Part 5]]></title>
    <link href="http://periphrastic-prolixity.herokuapp.com/blog/2014/10/31/the-tnt-journey-part-5/"/>
    <updated>2014-10-31T00:32:23+05:30</updated>
    <id>http://periphrastic-prolixity.herokuapp.com/blog/2014/10/31/the-tnt-journey-part-5</id>
    <content type="html"><![CDATA[<p>With all the work looking at the player side of stuff, I didn&rsquo;t spend too much time on the venue-based side of the problem. So I decided to get that done. What can sides expect in Australia and New Zealand ?</p>

<p><a href="http://plot.ly">Plotly</a> continues to impress with its usefulness.</p>

<!--more-->


<p>I couldn&rsquo;t come up with any really useful statistical measure to judge the performance in a particular venue, so I decided to go with three basic numbers - runs per 50 overs, wickets per 50 overs and boundaries per 50 overs - and put them in a 3D scatter plot (which turned out to be pretty easy with Plotly).</p>

<p>It was back to MongoDB&rsquo;s aggregation framework to put this together. I went with the same workflow that I had with aggregating player data - write the aggregation commands, use a Python script to create a new collection with all the data.</p>

<p>There were 89 unique venues in the given dataset. However, we couldn&rsquo;t go with the entire set because 30 of those venues hosted only one match, and one match is definitely not enough to observe a pattern. For example, there was only one match played at the Chinnaswamy Stadium and batsmen went all berzerk during that match - that also included Rohit Sharma&rsquo;s 209. But not all matches at the Chinnaswamy produce 600+ run spectacles. So there should be a minimum number of matches that a venue should have hosted if it has to be considered. Going with a minimum of 3 matches, we have a list of 40 venues (which notably exclude MAC, Wankhede and Eden Gardens).</p>

<p>Working with these 40 venues, we set up a collection which contains the three stats that we are considering for each venue. Now it&rsquo;s just a matter of setting up the 3D scatter plot on Plotly. Since we are grouping by country, we need the country that the venue is located in. This was the annoyingly hard part - manually finding the country.</p>

<p>Now with some basic statistics on the data I have, and the generated 3D scatter plots, we can make some conclusions.</p>

<p>The scatter plot with all the countries which have venues in the dataset.</p>

<iframe frameborder="0" seamless="seamless" scrolling="no" src="https://plot.ly/~AlexMathew/10.embed" width="800" height="800"></iframe>


<p>Specifically with Australia and New Zealand.</p>

<iframe frameborder="0" seamless="seamless" scrolling="no" src="https://plot.ly/~AlexMathew/11.embed" width="800" height="800"></iframe>


<p>Across the 9 venues in Australia and New Zealand, the mean 50 over score increases by more than 10 to reach a score of 247, while the mean wickets/50overs remains almost the same - around 7.5. So expect many lower-order pinch hitters to make cameos. With 300+ scores becoming commonplace in ODI cricket, expect this mean 50 over score to increase over the course of the World Cup. Expect the average of 25 boundaries/50overs only from mediocre teams - if a team really has to make a mark, they&rsquo;ll have to step up that number. This World Cup is a funny mix because Australia is known for its longer boundaries, while New Zealand is known for its shorter boundaries. Batting fests are extremely possible in NZ, while Australia will host more balanced battles.</p>

<p>More insights soon.</p>

<p>I&rsquo;ll also continue working on finding a good way to build the team.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The TNT Journey - Part 4]]></title>
    <link href="http://periphrastic-prolixity.herokuapp.com/blog/2014/10/29/the-tnt-journey-part-4/"/>
    <updated>2014-10-29T09:17:35+05:30</updated>
    <id>http://periphrastic-prolixity.herokuapp.com/blog/2014/10/29/the-tnt-journey-part-4</id>
    <content type="html"><![CDATA[<p>When you have exams and an interesting problem that you have to complete in a few days, it&rsquo;s not too cool to go down with a fever. These next couple of days are going to be a blaze with all the work. I need to get this done with.</p>

<p>Before picking the teams, I needed a way to visually represent the data I had so far. I needed to have the graphs look beautiful, and also easy to generate.</p>

<p>Enter <a href="https://plot.ly">Plotly</a></p>

<!--more-->


<p>I think of it more as, the GitHub of Graphs.</p>

<p>I heard about Plotly during PyCon India 2014. I found it really interesting and decided to use it for any interesting project I had to work on (also because I put a Plotly sticker on my laptop, so I had to use it because I donated laptop real estate to it). Just as I was looking for ideas of things to work on, I came across TNT, so I decided that it might be a good time to start using Plotly.</p>

<p>It was so much easier than I thought.</p>

<p>I decided to use the <a href="https://plot.ly/python">Plotly Python API</a> for generating some visual representations of the data. The documentation is very extensive, and the examples given are usually more than enough to get you going. The best part is how easy it is to collaborate and work on the graphs across languages/tools - when you have the link to your graph, all you have to do is add a .py or .r or .js or .m to work with the graph in Python, R, Javascript or Matlab. The link with .png gives the graph as an image, and .html gives an iframe that embeds the graph in a web page. How cool is that !</p>

<p>I decided to go with using iframes mainly because I wouldn&rsquo;t have to edit the webpage every time I edited the graph. It would be really useful when I worked on my data often.</p>

<p>So I went ahead and built histograms for each of the 7 batting/bowling statistics that I mentioned in the <a href="http://periphrastic-prolixity.herokuapp.com/blog/2014/10/26/the-tnt-journey-part-3/">previous post</a>.</p>

<p>Starting off with the batting stats.</p>

<ul>
<li>Runs per wicket</li>
</ul>


<iframe frameborder="0" seamless="seamless" scrolling="no" src="https://plot.ly/~AlexMathew/1.embed" width="600" height="400"></iframe>


<ul>
<li>Runs per 100 balls</li>
</ul>


<iframe frameborder="0" seamless="seamless" scrolling="no" src="https://plot.ly/~AlexMathew/2.embed" width="600" height="400"></iframe>


<ul>
<li>Pinch hitting rate</li>
</ul>


<iframe frameborder="0" seamless="seamless" scrolling="no" src="https://plot.ly/~AlexMathew/3.embed" width="600" height="400"></iframe>


<p>The bowling stats.</p>

<ul>
<li>Overs to concede 100 runs</li>
</ul>


<iframe frameborder="0" seamless="seamless" scrolling="no" src="https://plot.ly/~AlexMathew/4.embed" width="600" height="400"></iframe>


<ul>
<li>Wickets per 10 overs</li>
</ul>


<iframe frameborder="0" seamless="seamless" scrolling="no" src="https://plot.ly/~AlexMathew/5.embed" width="600" height="400"></iframe>


<ul>
<li>Overs to concede 10 boundaries</li>
</ul>


<iframe frameborder="0" seamless="seamless" scrolling="no" src="https://plot.ly/~AlexMathew/6.embed" width="600" height="400"></iframe>


<ul>
<li>Overs to concede an extra</li>
</ul>


<iframe frameborder="0" seamless="seamless" scrolling="no" src="https://plot.ly/~AlexMathew/7.embed" width="600" height="400"></iframe>


<p>Now, this is useful to notice how I can&rsquo;t use the entire player dataset to generate my team, because it would end up skewed in favour of players who rarely played. A player who has bowled only one over in the given timeframe, and conceded just 1 run along with taking a wicket will have statistics like 100 overs to concede 100 runs and 10 wickets per 10 overs - which is obviously messed up. So I need to set a minimum number of innings that a player should have batted or bowled in, if the player has to be considered for the team. I&rsquo;m setting that number at 23 - I&rsquo;ll see how it turns out and make changes if I have to.</p>

<p>I&rsquo;ll continue using Plotly to represent other statistics of the generated team. And that is what I&rsquo;ll have to start working on now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The TNT Journey - Part 3]]></title>
    <link href="http://periphrastic-prolixity.herokuapp.com/blog/2014/10/26/the-tnt-journey-part-3/"/>
    <updated>2014-10-26T11:27:57+05:30</updated>
    <id>http://periphrastic-prolixity.herokuapp.com/blog/2014/10/26/the-tnt-journey-part-3</id>
    <content type="html"><![CDATA[<p>Records, exams, assignments. The absolute worst time possible. Indian education will not improve till they get rid of this concept of maintaining a formal record book where you write unnecessary garbage. In the middle of all this, finding time to work on the TNT problem has been hard. But I&rsquo;ve been reading, trying out stuff and making some gradual progress. And of late, I&rsquo;ve approached this in a different way. Advice from a professor gave me an interesting way to go about this problem. Implementing has been hard, but the idea behind it is brilliant.</p>

<!--more-->


<p>&ldquo;Don&rsquo;t look for individual best performers. Put the team together and see the overall rating of the team. Pick the best team, not a collection of the best players&rdquo;. I had never thought of that, really. The best players statistic-wise could all be batsmen, and I&rsquo;d end up with a batting-heavy team with a poor bowling attack. So I had to find a way to strike a balance, by considering the team as a whole. And I considered using my professor&rsquo;s advice - genetic algorithms.</p>

<p>The idea was simple. From this <a href="http://www.obitko.com/tutorials/genetic-algorithms/ga-basic-description.php">basic introductory post about GA</a>,</p>

<blockquote><p>Algorithm is started with a set of solutions (represented by chromosomes) called population. Solutions from one population are taken and used to form a new population. This is motivated by a hope, that the new population will be better than the old one. Solutions which are selected to form new solutions (offspring) are selected according to their fitness - the more suitable they are the more chances they have to reproduce.</p></blockquote>

<p>I found a bunch of research papers, where people used GAs to do this exact thing - build fantasy cricket teams. The concept seemed simple enough - pick the parameters you want to maximise on, and implement the algorithm.</p>

<p>Implementing seemed like a bitch. The NSGA-II algorithm was an extremely computation-intensive algorithm that involved many iterations, so I knew I couldn&rsquo;t write the algorithm from scratch and expect to get an optimized implementation. I had either go for Python genetic programming libraries, or find someone else&rsquo;s implementation of the algorithm. I checked out <a href="https://code.google.com/p/deap/">Deap</a> - it looked like it could effectively give me what I needed. But setting up was really hard. I couldn&rsquo;t make much progress even after hours of reading the docs. So, Deap is on hold.</p>

<p>I found <a href="https://code.google.com/p/pynsga2/">another implementation of NSGA-II</a> that used multiprocessing to improve the speed of implementation. It required the fitness to be in a separate file - I need to try it out and see how that works.</p>

<p>So for now, it&rsquo;s still an experimentation phase with the implementation of the algorithm. I took some time out to decide the parameters I&rsquo;d want to maximise the fitness on.</p>

<p>BATSMEN :</p>

<ul>
<li><p>Runs per wicket : The batting average of the batsman. For good batsmen in the current cricketing world, this number hovers around 40.</p></li>
<li><p>Runs per 100 balls : The strike rate of the batsman. A strike rate of >85 is generally considered very good. A batsman with a 100+ strike rate is an ideal pinch hitter to finish the innings.</p></li>
<li><p>Pinch hitting rate : Boundaries scored per 100 balls, with more weight given to sixes. So effectively,
<code>python
pinch_hitting = 100.0 * (fours + (1.5 * sixes)) / balls_faced
</code></p></li>
</ul>


<p>BOWLERS :</p>

<p>The standard bowling statistics require to be minimized on. So for convenience sake, I took the inverse of these numbers, so I could maximise on them.</p>

<ul>
<li><p>Overs to concede 100 runs : A number built from the inverse of the economy rate. For good bowlers, this number is somewhere in the mid-20s.</p></li>
<li><p>Wickets per 10 overs : Built from the inverse of the bowling average. It is usually >1.5 for good strike bowlers.</p></li>
<li><p>Overs to concede 10 boundaries : Built from the inverse of the bowler&rsquo;s pinch hitting conceding rate, with weightage for sixes.</p></li>
<li><p>Overs to concede an extra : The inverse of extras per over.</p></li>
</ul>


<p>The hard part is finding ways to measure fielding/wicketkeeping performance. It was possible to find the total number of field dismissals that a player, but there&rsquo;s no way to know how many matches the player played. I only have the number of innings he batted or bowled in. It is possible that he played a match where he didn&rsquo;t bat, didn&rsquo;t bowl and didn&rsquo;t have a catch or run out credited to him.</p>

<p>I need a way to quantify a player&rsquo;s field performance. And I need to see how to implement NSGA-II to draft my team.</p>

<p>Updates soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The TNT Journey - Part 2]]></title>
    <link href="http://periphrastic-prolixity.herokuapp.com/blog/2014/10/17/the-tnt-journey-part-2/"/>
    <updated>2014-10-17T00:02:10+05:30</updated>
    <id>http://periphrastic-prolixity.herokuapp.com/blog/2014/10/17/the-tnt-journey-part-2</id>
    <content type="html"><![CDATA[<p>Step 1 : Get cummulative statistics. <a href="http://periphrastic-prolixity.herokuapp.com/blog/2014/10/16/the-tnt-journey-part-1/">Done</a>.</p>

<p>Now I need to find a way to measure the performance of these players during this period. Several people have written about different statistics to do this. I need to pick the best ones for the problem I have at hand.</p>

<!--more-->


<p>Aggregation worked beautifully. I got the cummulative stats I needed to work with. Now I have to put this into a new collection and I&rsquo;m all set to go. Except, it wasn&rsquo;t that easy. Updating a collection with results from the aggregation pipeline is pretty hard. Looping through the results is too inefficient. After some research (read, StackOverflow), I found the $out pipeline stage. Seemed like just what I needed. I gave it a shot and got this.</p>

<pre><code>"errmsg" : "exception: Unrecognized pipeline stage name: '$out'"
</code></pre>

<p>Roadblock ! Turns out $out is a new addition in MongoDB 2.6 and I was working with 2.4. So before any more progress could happen, an update had to happen.</p>

<p>While I waited for the 100+ MB file download to complete (I have bad internet - 100MB is a big deal), I read some Quora answers and research papers on performance measures. Now I had to pick the ones that gave the most efficient results.</p>

<p>I needed some proper measures to judge how useful a player is on a team. It&rsquo;s cricket, so a player can contribute to a team in many different ways. He could be a batsman who plays the bulk of the innings to set up the score, or he could be a batsman who faces around 15 or 20 balls to make a quickfire 30. He could be the strike bowler who takes 2 or 3 wickets in his qouta of 10 overs, or he could be the bowler who restricts the opponents&#8217; run flow by conceding only at around 3 runs an over.</p>

<p>So what statistics would I have to consider ?</p>

<ul>
<li><p>Batting average : Runs scored per out. Undoubtedly, one of the most argued about statistics in cricket. And for valid reasons. The batting average ends up extremely skewed in favour of players who come lower down the order, because of the higher probability that they&rsquo;d remain not out.</p></li>
<li><p>Strike rate : Runs scored per 100 balls. I remember watching cricket at a time when a strike rate of around 80 was the trademark of a &ldquo;blazing innings&rdquo;. Times have definitely changed. Higher strike rates are a major focus in batting line ups.</p></li>
<li><p>Batting pinch hitting rate : A very good idea I got out of <a href="http://www.quora.com/What-new-statistical-measures-could-make-cricket-better-in-terms-of-player-evaluation-and-viewer-experience/answer/Thomas-Foster">this Quora answer</a>. Boundaries have a huge impact on the flow of a match. It switches momentum, leads to the fielding setup getting shuffled, and so much more. This can be improved a little by giving a higher weightage to sixes (because sixes are awesome !).</p></li>
<li><p>Bowling average : Runs conceded per wicket taken. The lower, the better. Pretty efficient stat to work with.</p></li>
<li><p>Bowling strike rate : Balls bowled per wicket. Because strike bowlers strike often.</p></li>
<li><p>Bowling pinch hitting rate : If it can be used to quantify a batsman&rsquo;s performance, it can be used for bowlers too. Batsmen want to score boundaries, bowlers should make sure they can&rsquo;t.</p></li>
</ul>


<p>I need to find a way to work with all of these numbers together. And there should be an efficient way to strike a balance. Hashim Amla may not be the quickest scorer, but he definitely scores a lot. James Anderson has an average economy rate, but he&rsquo;s one of the best strike bowlers in the world. Normalize, combine these stats into one index - I need to see what works best.</p>

<p>In other MongoDB news, it turns out $out is not what I need. I need to combine the results from multiple aggregation commands into one collection, but $out puts the result from one aggregation command into one collection. So I need to move back to my original option of looping through the results. Fire IPython, <code>import pymongo</code> and get to work.</p>

<p>Now that I have player-wise statistics, I need to find the most efficient way to quantify their overall performance and pick the best performers.</p>

<p>Part 3 may take a while to come out. I&rsquo;ll work on some options and make one grand update on my progress.</p>
]]></content>
  </entry>
  
</feed>
